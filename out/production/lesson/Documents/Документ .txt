Контрольные вопросы и ответы по Java (Темы: массивы, классы и объекты, типы, методы )

---------------------------------------------------
1. Массивы

Вопрос 1: Что такое массив в Java?
Ответ: Массив в Java — это упорядоченная структура данных фиксированного размера, которая хранит элементы одного типа и предоставляет доступ к ним по индексу.

Вопрос 2: Как объявить массив целых чисел в Java тремя разными способами?
Ответ (примеры кода):
    1) int[] arr;
    2) int arr[];
    3) int []arr;

Вопрос 3: Как инициализировать массив arr из 5 элементов, заполненных нулями?
Ответ:
    int[] arr = new int[5];
Это создаст массив из 5 элементов, проинициализированных значением по умолчанию (для int это 0).

Вопрос 4: Как задать массив сразу со значениями при объявлении?
Ответ (пример кода):
    int[] arr = {10, 20, 30, 40, 50};

Вопрос 5: Что произойдёт, если обратиться к массиву по индексу, который выходит за его границы?
Ответ: Произойдёт исключение ArrayIndexOutOfBoundsException.

Вопрос 6: Как узнать длину массива в Java?
Ответ: Через свойство length, например arr.length.

Вопрос 7: Как создать двумерный массив (матрицу) размером 3x3?
Ответ (пример кода):
    int[][] matrix = new int[3][3];

Вопрос 8: Чем массив отличается от списка (ArrayList) в Java?
Ответ:
    - Массив имеет фиксированный размер, в отличие от ArrayList.
    - ArrayList может динамически изменять свой размер.
    - Массив может хранить примитивные типы непосредственно, а ArrayList работает с объектами (через классы-обёртки).

Вопрос 9: Как перебрать все элементы массива с помощью цикла for-each?
Ответ (пример кода):
    int[] arr = {1, 2, 3, 4};
    for (int element : arr) {
        System.out.println(element);
    }

Вопрос 10: Какие основные операции обычно выполняются с массивами?
Ответ: Вставка, удаление, поиск элемента, проход по элементам, сортировка и т. д.

---------------------------------------------------
2. Классы и объекты

Вопрос 1: Что такое класс в Java?
Ответ: Класс — это шаблон (описание), по которому создаются объекты. Он определяет состояние (поля) и поведение (методы) объектов.

Вопрос 2: Что такое объект (экземпляр класса)?
Ответ: Объект — это конкретный представитель класса, обладающий собственным состоянием (значениями полей) и способностью вызывать методы класса.

Вопрос 3: Как создать объект класса Car, если класс уже объявлен?
Ответ (пример кода):
    Car myCar = new Car();

Вопрос 4: Для чего используется ключевое слово new?
Ответ: Ключевое слово new выделяет память в куче (heap) и создаёт экземпляр класса (объект).

Вопрос 5: В чём разница между полем (field) и локальной переменной?
Ответ:
    - Поле (field) объявляется внутри класса, но вне методов; оно принадлежит объекту (или классу, если статическое).
    - Локальная переменная объявляется внутри метода и видна только в нём.

Вопрос 6: Какие модификаторы доступа существуют в Java?
Ответ: public, protected, (package-private, когда не указывается модификатор явно), private.

Вопрос 7: Что значит «инкапсуляция» в ООП (на примере Java)?
Ответ: Инкапсуляция — это сокрытие внутренних деталей реализации и предоставление к ним доступа только через методы (геттеры и сеттеры), чтобы защитить поля от некорректного использования.

Вопрос 8: В чём разница между классом и интерфейсом?
Ответ:
    - Класс может иметь поля и методы с реализацией.
    - Интерфейс содержит только сигнатуры методов (и статические константы); реализация методов в интерфейсе доступна через default- и static-методы, но в целом интерфейс задаёт контракт.
    - Класс можно инстанцировать, а интерфейс — нет.

Вопрос 9: Что такое конструктор класса и для чего он нужен?
Ответ: Конструктор — это специальный метод, который вызывается при создании объекта и инициализирует поля объекта начальными значениями.

Вопрос 10: Что такое статическое (static) поле или метод?
Ответ: Статическое поле или метод принадлежат самому классу, а не конкретному объекту. Их можно использовать без создания экземпляра класса.

---------------------------------------------------
3. Типы в Java

Вопрос 1: Какие есть примитивные типы в Java?
Ответ:
    - Целочисленные: byte, short, int, long
    - С плавающей точкой: float, double
    - Символьный: char
    - Логический: boolean

Вопрос 2: Что такое «диапазон значений» для примитивных типов и почему он важен?
Ответ: Диапазон значений определяет минимальное и максимальное значение, которое может хранить переменная данного типа. Это важно, чтобы избежать переполнения (overflow) и выбирать подходящий тип.

Вопрос 3: Чем отличается int от long?
Ответ: int обычно 32-битный, а long — 64-битный. Соответственно, long может хранить более широкий диапазон целых чисел.

Вопрос 4: Что будет, если сложить два значения типа byte?
Ответ: В Java арифметические операции над типами меньше int приводят их к int. Поэтому результат будет int. При необходимости вернуть byte потребуется явное приведение (cast).

Вопрос 5: Что такое «автобоксинг» (autoboxing) и «распаковка» (unboxing)?
Ответ: Автобоксинг — автоматическое преобразование примитива (например, int) в соответствующий класс-обёртку (Integer). Распаковка — обратное преобразование (из Integer в int).

Вопрос 6: Зачем нужны классы-обёртки (Wrapper Classes)?
Ответ: Чтобы работать с примитивами как с объектами. Это необходимо, например, при использовании коллекций (List<Integer> и т. п.).

Вопрос 7: Что будет результатом выражения (float) (1 / 2)?
Ответ: 1 и 2 — целые числа, их деление даст 0 (целочисленное деление). После приведения к float это 0.0.

Вопрос 8: Какова разница между float и double?
Ответ:
    - float — 32-битный (одинарная точность),
    - double — 64-битный (двойная точность).
double даёт больший диапазон и точность.

Вопрос 9: Что означает ключевое слово final при объявлении переменной?
Ответ: Переменная объявляется константой, её значение нельзя изменить после инициализации.

Вопрос 10: Можно ли присвоить null примитивному типу?
Ответ: Нет, null можно присвоить только ссылочным типам (объектам). Примитивы не могут принимать значение null.

---------------------------------------------------
4. Методы

Вопрос 1: Что такое метод в Java?
Ответ: Метод — это именованный блок кода (функция), который можно вызвать из других частей программы. Методы могут принимать параметры и возвращать значение.

Вопрос 2: Как объявить метод, который возвращает целое число и принимает два параметра типа int?
Ответ (пример кода):
    public int sum(int a, int b) {
        return a + b;
    }

Вопрос 3: Что означает слово void в объявлении метода?
Ответ: Указывает, что метод не возвращает никаких значений.

Вопрос 4: Чем отличаются параметры (parameters) и аргументы (arguments)?
Ответ:
    - Параметры — это переменные в сигнатуре метода.
    - Аргументы — реальные значения, которые передаются при вызове метода.

Вопрос 5: Что такое перегрузка методов (method overloading)?
Ответ: Определение нескольких методов с одинаковым именем, но разными списками параметров (типами, количеством или порядком).

Вопрос 6: Что будет, если метод ничего не возвращает, но при этом в сигнатуре указан тип возвращаемого значения int?
Ответ: Компилятор выдаст ошибку: метод обязан вернуть значение типа int на всех ветках кода.

Вопрос 7: Зачем в Java существуют геттеры и сеттеры (getters и setters)?
Ответ: Они обеспечивают контроль над доступом и изменением полей объекта, скрывая прямой доступ к полям (инкапсуляция).

Вопрос 8: Можно ли объявить метод внутри другого метода?
Ответ: Нет, в Java нельзя объявлять методы внутри методов. Все методы должны находиться на уровне класса.

Вопрос 9: В чём разница между return и System.out.println(...)?
Ответ:
    - return прерывает выполнение метода и возвращает значение (если метод не void).
    - System.out.println(...) просто выводит текст в консоль и не прерывает выполнение.

Вопрос 10: Можно ли использовать ключевое слово this в статическом методе?
Ответ: Нет, в статическом методе нет ссылки на конкретный объект, поэтому this там не доступен.

=========================================

1. ПРИМИТИВНЫЕ ТИПЫ И ИХ ОСОБЕННОСТИ
-----------------------------------
Вопрос: Какие примитивные типы данных существуют в Java?
Ответ:
1) byte
2) short
3) int
4) long
5) float
6) double
7) char
8) boolean

Вопрос: Для чего нужны типы с плавающей точкой (float и double)?
Ответ:
Они используются для хранения вещественных (дробных) чисел. double имеет большую точность и диапазон значений, чем float.

Вопрос: Какой тип в Java используется для логических значений «истина» и «ложь»?
Ответ:
boolean (может принимать значения true или false).

Вопрос: Что произойдёт, если записать число, превышающее допустимый диапазон int, в переменную типа int?
Ответ:
Произойдёт переполнение (overflow). Значение «закрутится» по модулю максимального значения типа int.

Вопрос: Чем long отличается от int?
Ответ:
long — 64-битный целочисленный тип, а int — 32-битный. long имеет гораздо больший диапазон значений. Чтобы указать литерал типа long, используют суффикс L (например, 10000000000L).

-----------------------------------

2. АРИФМЕТИЧЕСКИЕ ОПЕРАЦИИ
--------------------------
Вопрос: Какие арифметические операторы есть в Java и для чего они используются?
Ответ:
+ (сложение), - (вычитание), * (умножение), / (деление), % (остаток от деления).

Вопрос: Что произойдёт при делении 7 на 2, если переменные типа int?
Ответ:
Результат будет 3 — целочисленное деление (дробная часть отбрасывается).

Вопрос: Как в Java получить остаток от деления?
Ответ:
Использовать оператор %, например, 7 % 2 даёт 1.

Вопрос: Что будет результатом выражения 5 / 2.0?
Ответ:
2.5, поскольку одно из чисел (2.0) является double, и выполняется вещественное деление.

Вопрос: Что такое инкремент и декремент?
Ответ:
Инкремент (++) увеличивает значение на 1, декремент (--) — уменьшает. Существуют префиксные (++i, --i) и постфиксные (i++, i--) варианты.

-----------------------------------

3. ПРИВЕДЕНИЕ ТИПОВ (CASTING)
-----------------------------
Вопрос: Что такое «неявное приведение типов»?
Ответ:
Автоматическое преобразование одного типа в другой, когда это безопасно. Например, int может перейти в double без явного указания.

Вопрос: Приведите пример неявного приведения типов.
Ответ:
int a = 5;
double b = 10.0;
double c = a + b; // 5 автоматически приводится к 5.0

Вопрос: Что такое «явное приведение типов»?
Ответ:
Это преобразование типа, указываемое программистом явно с помощью (тип). Может приводить к потере точности.

Вопрос: Приведите пример явного приведения типов.
Ответ:
double d = 9.99;
int i = (int) d; // i = 9, дробная часть отбрасывается

Вопрос: Что произойдёт при явном преобразовании double в int, если значение нецелое?
Ответ:
Отбрасывается дробная часть. Например, (int) 3.14 даёт 3.

-----------------------------------

4. ПОРЯДОК ВЫЧИСЛЕНИЙ (ПРИОРИТЕТ ОПЕРАТОРОВ)
-------------------------------------------
Вопрос: Перечислите упрощённый порядок (приоритет) операторов в Java.
Ответ:
1) Постфиксные операторы (i++, i--)
2) Префиксные унарные операторы (++i, --i, (тип))
3) Умножение, деление, остаток (*, /, %)
4) Сложение и вычитание (+, -)
5) Операторы сравнения (<, >, <=, >=)
6) Операторы равенства/неравенства (==, !=)
7) Логическое И (&&)
8) Логическое ИЛИ (||)
9) Присваивание (=, +=, -= и т.д.)

Вопрос: Какое значение будет у выражения 2 + 3 * 4 и почему?
Ответ:
14, так как сначала вычисляется 3 * 4 = 12, а затем 2 + 12 = 14.

Вопрос: Что делает оператор () (скобки) в арифметическом выражении?
Ответ:
Скобки изменяют порядок вычислений, заставляя сначала выполнить выражение в скобках.

Вопрос: Чему равно (2 + 3) * 4?
Ответ:
20, сначала (2 + 3) = 5, затем 5 * 4 = 20.

Вопрос: Как изменится результат, если убрать скобки в 2 + 3 * 4?
Ответ:
Станет 14, так как умножение выполняется раньше сложения.

-----------------------------------

5. ЛОГИЧЕСКИЕ ВЫРАЖЕНИЯ И ОПЕРАТОРЫ СРАВНЕНИЯ
--------------------------------------------
Вопрос: Какие операторы сравнения существуют в Java?
Ответ:
>, <, >=, <=, ==, !=

Вопрос: Что возвращают операторы сравнения?
Ответ:
true или false.

Вопрос: Чем отличается == от =?
Ответ:
== — оператор сравнения на равенство, а = — оператор присваивания.

Вопрос: Что вернёт выражение 5 == 5 и 5 != 5?
Ответ:
5 == 5 даст true, 5 != 5 даст false.

Вопрос: Как проверить, что число x строго больше, чем число y?
Ответ:
Использовать x > y.

-----------------------------------

6. ЛОГИЧЕСКИЕ И (&&) И ИЛИ (||)
-------------------------------
Вопрос: Как работает логический оператор && (логическое И)?
Ответ:
true, если оба операнда true; иначе false.

Вопрос: Как работает логический оператор || (логическое ИЛИ)?
Ответ:
true, если хотя бы один операнд true; иначе false.

Вопрос: Чему равно (5 > 3) && (2 < 1)?
Ответ:
(5 > 3) это true, (2 < 1) это false, вместе true && false = false.

Вопрос: Чему равно (5 > 3) || (2 < 1)?
Ответ:
true || false = true.

Вопрос: В чём разница между & и &&, а также | и ||?
Ответ:
& и | вычисляются побитово (или как логические без короткого замыкания), тогда как && и || — логические операторы с коротким замыканием.

-----------------------------------

7. ОТРИЦАНИЕ (!) И ПОРЯДОК ЛОГИЧЕСКИХ ОПЕРАЦИЙ
--------------------------------------------
Вопрос: Как работает оператор !?
Ответ:
! — логическое отрицание. !true = false, !false = true.

Вопрос: Что произойдёт при вычислении !(5 > 3)?
Ответ:
(5 > 3) даёт true, затем !true даёт false.

Вопрос: Каков порядок вычисления логических операторов !, && и ||?
Ответ:
Сначала !, затем &&, потом ||, если не использовать скобки.

Вопрос: Чему равно выражение true || false && !false?
Ответ:
1) !false = true
2) false && true = false
3) true || false = true
Итоговое значение: true.

Вопрос: Как изменить приоритет вычисления в логических выражениях?
Ответ:
Использовать скобки.

-----------------------------------

8. ДОПОЛНИТЕЛЬНЫЕ ВОПРОСЫ С КОМБИНАЦИЯМИ
---------------------------------------
Вопрос: Чему будет равно (10 / 3) * (2 + 3) при int-переменных?
Ответ:
10 / 3 = 3 (целочисленно), 2 + 3 = 5, 3 * 5 = 15.

Вопрос: Чему будет равно (5 > 3) && (2 * 2 == 4)?
Ответ:
(5 > 3) = true, (2 * 2 == 4) = true, значит true && true = true.

Вопрос: Как проверить, что число x не равно 10 и при этом положительно?
Ответ:
(x != 10) && (x > 0).

Вопрос: Напишите выражение, которое проверяет, что число n лежит в диапазоне 1..100 (включительно).
Ответ:
(n >= 1) && (n <= 100).

Вопрос: Как проверить, что число a делится на 3 и на 5 одновременно?
Ответ:
(a % 3 == 0) && (a % 5 == 0).

Вопрос: Чему равно выражение 2 + 2 * 2?
Ответ:
6 (сначала 2 * 2 = 4, затем 2 + 4 = 6).

Вопрос: Какое логическое значение даст сравнение 'a' > 'A'?
Ответ:
true, поскольку в Unicode код 'a' (97) больше, чем код 'A' (65).

Вопрос: Для чего может потребоваться явное преобразование long в int?
Ответ:
Если надо передать значение long в код, ожидающий int, но при этом возможна потеря части числа, если оно велико.

Вопрос: Как результат вычислится выражение (true && false) || true?
Ответ:
(true && false) = false, false || true = true, итог true.

Вопрос: Чем отличается результат 5.0 / 2 от 5 / 2?
Ответ:
5.0 / 2 = 2.5 (вещественное деление), 5 / 2 = 2 (целочисленное).

-----------------------------------

9. КОРОТКОЕ ЗАМЫКАНИЕ (SHORT-CIRCUIT)
-------------------------------------
Вопрос: Что такое «короткое замыкание» в контексте операторов && и ||?
Ответ:
Если первый операнд однозначно определяет результат, второй не вычисляется. Например, false && ... = false без вычисления второго операнда.

Вопрос: Какое поведение будет у & и | по сравнению с && и ||?
Ответ:
& и | вычисляют оба операнда всегда, без короткого замыкания.

Вопрос: Какое значение у (false && (5 / 0 > 1)) при && и почему?
Ответ:
false, без ошибки деления, так как второй операнд не вычисляется (короткое замыкание).

Вопрос: А если использовать &: (false & (5 / 0 > 1))?
Ответ:
Будет ArithmeticException из-за деления на ноль — оба операнда вычисляются.

Вопрос: В каких ситуациях удобно использовать короткое замыкание?
Ответ:
Когда дальнейшая часть проверки может вызвать ошибку или не имеет смысла, если первый операнд уже определил результат.

-----------------------------------

10. ИТОГОВЫЕ ВОПРОСЫ ПО НЕСКОЛЬКИМ ТЕМАМ
--------------------------------------
Вопрос: Чем отличаются переменные примитивного типа от переменных-ссылок (объектов) в Java?
Ответ:
Примитивы хранят сами значения (числа, логические значения, символы). Ссылочные типы (объекты) хранят в переменной ссылку на объект, который лежит в куче (heap).

Вопрос: Что будет выведено на экран?
int x = 10;
double y = x / 4;
System.out.println(y);
Ответ:
Выведется 2.0, т.к. x / 4 вычисляется как int (получается 2), а при присвоении double результат превращается в 2.0.

Вопрос: Как правильно получить дробную часть от деления int-переменных a и b?
Ответ:
Нужно привести одно из чисел к double: ((double) a) / b.

Вопрос: Чему будет равно (3 + 4) * 2 + 5 > 15?
Ответ:
(3 + 4) = 7, 7 * 2 = 14, 14 + 5 = 19, 19 > 15 = true.

Вопрос: Для чего нужен оператор instanceof (не про примитивы, но в Java)?
Ответ:
instanceof проверяет, является ли объект экземпляром класса/подкласса. Для примитивов не работает.

Вопрос: Чему равно выражение -5 % 2 в Java?
Ответ:
-1 (остаток имеет тот же знак, что и делимое).

Вопрос: Чему равно выражение 2 * 2 + 3 == 7?
Ответ:
2 * 2 = 4, 4 + 3 = 7, 7 == 7 → true.

Вопрос: Приведите пример, когда нужно явно использовать скобки в логическом выражении.
Ответ:
Например, (a < 10 && b > 5) || c == 0. Без скобок может быть неочевидно, как сочетаются && и ||.

Вопрос: Как получить остаток от деления положительного на отрицательное, например 10 % -3?
Ответ:
10 % -3 = 1. В Java знак остатка совпадает со знаком делимого (10).

Вопрос: Почему (i++ + ++i) может давать разные результаты в языках C/C++, а в Java порядок фиксирован?
Ответ:
В Java порядок вычисления определён стандартом. В C/C++ (в некоторых старых стандартах) такое могло приводить к неопределённому поведению. В Java результат выражения предсказуем.

=========================================

1. Списки и массивы

Вопрос 1:
Чем отличается массив (Array) от списка (ArrayList) в Java?
Ответ:
- У массива фиксированный размер, заданный при создании, у ArrayList — динамический.
- Массив может содержать примитивы, а ArrayList только объекты (примитивы в виде wrapper-классов).
- У массива сложнее добавлять/удалять элементы, в ArrayList для этого есть удобные методы (add, remove).
- Доступ к элементам массива всегда быстрый (O(1)), в ArrayList при недостатке места возможна реаллокация, но амортизированная сложность обычно тоже O(1).

Вопрос 2:
Какие основные операции более удобны в ArrayList, чем в массиве?
Ответ:
- Добавление нового элемента без ручного управления размером.
- Удаление элемента из середины (со сдвигом остальных).
- Поиск элемента методами contains(), indexOf() и др.

Вопрос 3:
Какие сложности (Big O) у следующих операций в ArrayList: добавление в конец, удаление по индексу, поиск по индексу?
Ответ:
- Добавление в конец (амортизированно): O(1).
- Удаление по индексу: O(n).
- Поиск по индексу: O(1).

Вопрос 4:
Как и когда стоит использовать массив, а не ArrayList?
Ответ:
- Когда размер данных известен заранее и не меняется.
- Когда важна максимальная производительность без динамического изменения размера.
- Когда нужны примитивы без накладных расходов на объекты-обёртки.

Вопрос 5:
Какие есть аналогичные структуры данных, кроме ArrayList, в Java, и чем они отличаются?
Ответ:
- LinkedList: эффективен при частых вставках/удалениях в начало или середину (без поиска по индексу), но доступ по индексу O(n).
- Vector: устаревший потокобезопасный список, более медленный в однопоточных средах.
- CopyOnWriteArrayList: потокобезопасный список, копирующий данные при модификациях.

2. Методы списков (ArrayList)

Вопрос 6:
Какие методы добавления в список (ArrayList) вы знаете?
Ответ:
- add(E e) — добавляет элемент в конец списка.
- add(int index, E element) — вставляет элемент в позицию index.
- set(int index, E element) — заменяет элемент по индексу (не добавляет!).

Вопрос 7:
Чем отличается add(int index, E element) от set(int index, E element)?
Ответ:
- add(int index, E element) вставляет и сдвигает существующие элементы, увеличивая размер списка.
- set(int index, E element) заменяет уже существующий элемент, не меняя размер списка.

Вопрос 8:
Как проверить, есть ли определённый элемент в ArrayList?
Ответ:
- contains(Object o) — возвращает true, если элемент найден.
- Также можно использовать indexOf(Object o) — вернёт индекс или -1, если элемента нет.

Вопрос 9:
Как удалить элемент из списка?
Ответ:
- remove(int index) — удаляет по индексу.
- remove(Object o) — удаляет первый найденный объект, равный o.
- clear() — очищает весь список.

Вопрос 10:
Для чего используется метод get(int index)?
Ответ:
- Для получения элемента по индексу. Если индекс за пределами списка, выбрасывается IndexOutOfBoundsException.

Вопрос 11:
Что происходит в ArrayList, когда ему не хватает места для нового элемента?
Ответ:
- Создаётся новый массив большего размера, в него копируются элементы старого массива (реаллокация).
- Обычно размер увеличивается на 50% (или по другой формуле).

3. Хеш-таблицы. Общая теория

Вопрос 12:
Что такое хеш-таблица (Hash Table)?
Ответ:
- Структура данных, хранящая пары «ключ-значение».
- Позволяет быстро (O(1) в среднем) находить значение по ключу за счёт хеш-функции.

Вопрос 13:
Что такое коллизия в хеш-таблицах и как она обычно решается?
Ответ:
- Коллизия — когда два разных ключа имеют одинаковый хеш.
- Решается хранением нескольких пар (ключ-значение) в одном bucket’е через связанный список или дерево (в современной Java).

Вопрос 14:
Какие факторы влияют на производительность хеш-таблицы?
Ответ:
- Качество хеш-функции.
- Коэффициент загрузки (load factor).
- Способ разрешения коллизий (цепочки, дерево и т. д.).
- Частота ре-хеширования.

Вопрос 15:
В чём состоят преимущества хеш-таблиц по сравнению с поиском в списке?
Ответ:
- В списке нужно перебирать все элементы (O(n)).
- В хеш-таблице поиск осуществляется за O(1) в среднем (прямой доступ через хеш ключа).

4. HashMap в Java

Вопрос 16:
Как объявить и инициализировать HashMap в Java?
Ответ:
Map<String, Integer> map = new HashMap<>();
или
HashMap<String, Integer> map = new HashMap<>();

Вопрос 17:
Какие основные методы есть в HashMap?
Ответ:
- put(K key, V value)
- get(Object key)
- remove(Object key)
- containsKey(Object key), containsValue(Object value)
- keySet(), values(), entrySet()

Вопрос 18:
Что произойдёт, если вызвать put() с ключом, который уже есть в HashMap?
Ответ:
- Старое значение будет перезаписано новым.
- Метод put() вернёт предыдущее значение или null.

Вопрос 19:
Как проверить наличие ключа в HashMap?
Ответ:
- containsKey(key) — вернёт true, если ключ уже в мапе.

Вопрос 20:
В чём разница между HashMap и Hashtable в Java?
Ответ:
- HashMap не синхронизирован, разрешает ключ/значение равным null.
- Hashtable синхронизирован (более старый класс), не допускает null-ключей/значений.

Вопрос 21:
Что такое load factor и почему он важен в HashMap?
Ответ:
- Коэффициент загрузки (load factor) — число элементов / размер массива корзин.
- Если превышается порог (по умолчанию 0.75), происходит ре-хеширование и расширение таблицы.

Вопрос 22:
Что такое rehash (перехеширование) и когда оно происходит в HashMap?
Ответ:
- Пересчёт хеш-кодов и перераспределение пар по новым корзинам.
- Происходит при превышении capacity * loadFactor.

Вопрос 23:
Как получить все ключи из HashMap?
Ответ:
- keySet(), который возвращает Set<K>.

Вопрос 24:
Как перебрать все пары «ключ-значение» в HashMap?
Ответ:
- entrySet(), возвращает Set<Map.Entry<K, V>>.
- Пример:
  for (Map.Entry<String, Integer> entry : map.entrySet()) {
      System.out.println(entry.getKey() + " => " + entry.getValue());
  }

Вопрос 25:
Почему в современных реализациях HashMap при коллизиях используется красно-чёрное дерево вместо связного списка?
Ответ:
- Связный список даёт O(n) в худшем случае при множестве коллизий.
- Красно-чёрное дерево даёт O(log n), что более эффективно.

Дополнительные вопросы

Вопрос 26:
Какой будет результат вызова get(null) или put(null, value) в HashMap?
Ответ:
- HashMap допускает null-ключ. get(null) вернёт значение, связанное с null, если оно есть.
- put(null, value) корректно добавит пару (null, value).

Вопрос 27:
Что произойдёт, если мы изменим объект, который используется как ключ, после того как положили его в HashMap?
Ответ:
- Хеш-код может измениться, что приведёт к несоответствию реального bucket’а. По сути, такой ключ «потеряется».
- Менять поля, влияющие на hashCode/equals, после вставки — плохая практика.

Вопрос 28:
В чём разница между hashCode() и equals()?
Ответ:
- hashCode() возвращает целое число для хеш-таблиц.
- equals() определяет логическое равенство объектов.
- По контракту Java, если equals(a, b) == true, то hashCode(a) должно совпадать с hashCode(b).

=========================================